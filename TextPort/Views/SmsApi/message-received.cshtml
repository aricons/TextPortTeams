@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Inbound Messages | SMS API";
    ViewData["Description"] = "TextPort's SMS API handles incoming SMS messages";
    ViewData["Keywords"] = "Receive text messages API, SMS API for receiving texts";
    ViewData["Url"] = "https://textport.com/api/documentation/message-received";
}

<script type="text/javascript" src="~/content/highlight.pack.js"></script>
<link rel="stylesheet" type="text/css" href="/content/css/api.css">
<link rel="stylesheet" type="text/css" href="~/content/highlight/styles/dracula.css">

<script type="text/javascript">
    $(function () {
        $('#menu_samples').addClass("active");
        $('#lang-tab li:first-child a').tab('show')
    });
</script>

<div class="container">
    <div class="row">
        @Html.Partial("_ApiSideMenuBar")
        <div class="col-12 col-md-9">
            <div class="card">
                <div class="card-header">
                    <h4>Inbound Message<span class="float-right">Pushed to {Your callback URL}</span></h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <h5>Description</h5>
                            <p>
                                When a message is received for a number on your account, TextPort will check whether the number has an
                                application assigned (see <a href="~/api/documentation/add-application">application setup</a> and <a href="~/api/documentation/assign-number">number assignment</a>). If an application is found, and a callback URL (webhook) is specified,
                                TextPort will POST an inbound message notification to your callback URL in the following format.
                            </p>
                            <p>
                                Notes:
                                <ul>
                                    <li>All callback events have the same format.</li>
                                    <li>The <i>EventType</i> field identifies the purpose of each event.</li>
                                    <li>All callback events are sent using an HTTP POST method.</li>
                                    <li>TextPort will expect an HTTP 2XX response to all callback events</li>

                                </ul>
                            </p>
                            <div class="gpbtn-lg mb-4">POST</div>
                            <h5>Endpoint</h5>
                            <p class="pb-3">http://your-domain/your-url-endpoint</p>
                            <h5>Sample Callback Event Payload</h5>
                            <ul class="nav nav-tabs" id="payload-tab" role="tablist">
                                <li class="nav-item">
                                    <a class="nav-link active" id="json-tab" data-toggle="tab" href="#json" role="tab" aria-controls="json" aria-selected="true">JSON</a>
                                </li>
                            </ul>
                            <div class="tab-content">
                                <div class="tab-pane active" id="json" role="tabpanel" aria-labelledby="json-tab">
                                    <pre><code class="json">{
    "EventType": "message-received",
    "Time": "2019-08-22 10:16:30",
    "MessageId": 189023482,
    "From": "19195551212",
    "To": "15055551212",
    "Cost": 0.015,
    "Message": {
        "From": "19195551212",
        "To": "15055551212",
        "MessageText": "Sample message callback for TextPort inbound message."
    },
    "Notifications": "New inbound message received from TextPort."
}</code></pre>
                                </div>

                            </div>
                            <h5>Response</h5>
                            <p>
                                TextPort will expect to receive an HTTP 200 (OK) or HTTP 202 (Accepted) response back from your endpoint/webkook.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>hljs.initHighlightingOnLoad()</script>